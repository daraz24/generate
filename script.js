const nouns     = ["リンゴ",
 "バナナ",
 "猫",
 "犬",
 "象",
 "花",
 "ぶどう",
 "帽子",
 "アイスクリーム",
 "ジュース",
 "鍵",
 "ライオン",
 "山",
 "ノート",
 "オレンジ",
 "ペン",
 "女王",
 "川",
 "太陽",
 "木",
 "傘",
 "バイオリン",
 "クジラ",
 "木琴",
 "ヨガ",
 "シマウマ",
 "飛行機",
 "本",
 "カメラ",
 "机",
 "卵",
 "火",
 "ギター",
 "家",
 "島",
 "クラゲ",
 "キウイ",
 "レモン",
 "マイク",
 "夜",
 "海",
 "鉛筆",
 "キルト",
 "雨",
 "ひまわり",
 "テーブル",
 "傘",
 "火山",
 "水",
 "X線",
 "毛糸",
 "動物園",
 "アリ",
 "蜂",
 "ナマズ",
 "恐竜",
 "ワシ",
 "フラミンゴ",
 "ゴリラ",
 "カバ",
 "イグアナ",
 "ジャガー",
 "カンガルー",
 "ライオンフィッシュ",
 "サル",
 "イッカク",
 "ウサギ",
 "カモメ",
 "トラ",
 "ユニコーン",
 "ハゲワシ",
 "セイウチ",
 "リス",
 "ヤマアラシ",
 "ヤドカリ",
 "コアラ",
 "ロブスター",
 "蚊",
 "ナウマンエイ",
 "タコ",
 "ペンギン",
 "クォッカ",
 "アライグマ",
 "サメ",
 "トキ",
 "ユニコーン",
 "ハゲオオカミ",
 "エイのX線写真",
 "ヤク",
 "シマウマ"];
 
const verbsAdjs = ["美しい",
 "賢い",
 "おいしい",
 "元気な",
 "親しみやすい",
 "優しい",
 "幸せな",
 "興味深い",
 "楽しい",
 "親切な",
 "かわいい",
 "素晴らしい",
 "素敵な",
 "楽観的な",
 "情熱的な",
 "静かな",
 "輝く",
 "強い",
 "感謝している",
 "ユニークな",
 "活気のある",
 "素晴らしい",
 "もてなしの良い",
 "若々しい",
 "スパイシーな",
 "怒った",
 "つまらない",
 "不器用な",
 "汚れた",
 "羨ましい",
 "愚かな",
 "不機嫌な",
 "急いだ",
 "無知な",
 "嫉妬深い",
 "怠惰な",
 "意地悪な",
 "うるさい",
 "信じられない",
 "悲観的な",
 "口論好きな",
 "失礼な",
 "利己的な",
 "考えのない",
 "醜い",
 "虚栄心の強い",
 "弱い",
 "外国人嫌いな",
 "慕う",
 "熱心な",
 "受け取る",
 "信じる",
 "捕まえる",
 "踊る",
 "食べる",
 "飛ぶ",
 "与える",
 "聞く",
 "想像する",
 "跳ぶ",
 "キスする",
 "笑う",
 "動く",
 "気付く",
 "開く",
 "遊ぶ",
 "尋ねる",
 "走る",
 "泳ぐ",
 "旅する",
 "理解する",
 "訪問する",
 "歩く",
 "X線を撮る",
 "叫ぶ",
 "ジグザグに動く",
 "尋ねる",
 "壊す",
 "料理する",
 "描く",
 "探検する",
 "修理する",
 "育てる",
 "助ける",
 "インスピレーションを与える",
 "参加する",
 "保つ",
 "学ぶ",
 "会う",
 "ナビゲートする",
 "整理する",
 "準備する",
 "やめる",
 "読む",
 "共有する",
 "教える",
 "使用する",
 "訪問する",
 "働く",
 "X線を撮る",
 "憧れる",
 "ジッパーを閉める"];

const generateBtn = document.getElementById("generate-btn");
const cardsContainer = document.getElementById("cards-container");
let card1 = null;
let card2 = null;

generateBtn.addEventListener("click", () => {
  // Clear the previous cards
  if (card1 !== null && card2 !== null) {
    cardsContainer.removeChild(card1);
    cardsContainer.removeChild(card2);
  }

  // Generate two new words
  const newNoun = nouns[Math.floor(Math.random() * nouns.length)];
  const newVerbAdj = verbsAdjs[Math.floor(Math.random() * verbsAdjs.length)];

  // Create new cards and add to the container
  card2 = createCard(newNoun);
  card1 = createCard(newVerbAdj);
  cardsContainer.appendChild(card1);
  cardsContainer.appendChild(card2);
});

function createCard(word) {
  const card = document.createElement("div");
  card.classList.add("card");
  const cardContent = `<p>${word}</p>`;
  card.innerHTML = cardContent;
  return card;
}
